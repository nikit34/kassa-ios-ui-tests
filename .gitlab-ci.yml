stages:
  - intro
  - clear
  - clone
  - build
  - environment
  - install
  - setup
  - test
  - history
  - generate
  - upload
  - deploy


variables:
  IOS_ID_SIMULATOR: "94064CAA-7B7C-415B-90EF-76712DF5005C"  # host simulator - does not match the actual one on the server
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/pip-cache"

workflow:
  rules:
    - when: always


telegram_job:
  stage: intro
  tags:
    - ios-host
  before_script:
    - python3 telegram_bot/starter.py start
  script:
    - python3 -m pip install virtualenv
    - python3 -m venv env
    - source env/bin/activate
  after_script:
    - python3 telegram_bot/client.py -n telegram_job
  allow_failure: true

clear_job:
  stage: clear
  tags:
    - ios-host
  before_script:
    - open -a Docker || true
  script:
    - killall Xcode || true
    - killall Appium || true
    - killall Simulator || true
  after_script:
    - python3 telegram_bot/client.py -n clear_job

app_job:
  stage: clone
  tags:
    - ios-host
  variables:
    PROJECT_REPO: "git@gitlab.rambler.ru:ramblerco-ios/kassa2.0.git"
  before_script:
    - yes | rm -r ./project && mkdir ./project || mkdir ./project || true
    - yes | rm -r /Users/jira.bot.kasmain/Library/Developer/XCode/DerivedData/* || mkdir -p Users/jira.bot.kasmain/Library/Developer/XCode/DerivedData || true
  script:
    - eval "$(ssh-agent -s)"
    - echo $IOS_HOST_PASSWORD | chmod 777 ./ssh_substitution.sh
    - DISPLAY=1 SSH_ASKPASS="./ssh_substitution.sh" ssh-add ~/.ssh/id_rsa < /dev/null
    - git clone --branch develop $PROJECT_REPO project
    - cd project
    - pod install --repo-update
  after_script:
    - killall ssh-agent
    - python3 telegram_bot/client.py -n app_job
  cache:
    untracked: true
    key: cache
    paths:
      - ./project
    policy: push
  retry: 2
  rules:
    - if: '$WITHOUT_TESTS != "True"'

build_job:
  stage: build
  tags:
    - ios-host
  before_script:
    - open -a Simulator --args -CurrentDeviceUDID $IOS_ID_SIMULATOR
  script:
    - security unlock-keychain -p $IOS_HOST_PASSWORD  # this variable in settings of gitlab.rambler.ru
    - xcodebuild -project /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent/WebDriverAgent.xcodeproj -scheme IntegrationApp build -allowProvisioningUpdates -destination "id=$IOS_ID_SIMULATOR"
    - xcodebuild -project /usr/local/lib/node_modules/appium/node_modules/appium-webdriveragent/WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner build -allowProvisioningUpdates -destination "id=$IOS_ID_SIMULATOR"
  after_script:
    - python3 telegram_bot/client.py -n build_job
  rules:
    - if: '$WITHOUT_TESTS != "True"'

compile_job:
  stage: environment
  trigger:
    include:
      - local: .compile-stage.yml
  rules:
    - if: '$WITHOUT_TESTS != "True"'

appium_job:
  stage: environment
  trigger:
    include:
      - local: .appium-stage.yml

postgres_job:
  stage: environment
  trigger:
    include:
      - local: .postgres-stage.yml

redis_job:
  stage: environment
  trigger:
    include:
      - local: .redis-stage.yml

install_job:
  stage: install
  tags:
    - ios-host
  variables:
    BOUNDLE_ID: "com.rambler.kassa"
  before_script:
    - rm -r ./app/Kassa.app && mkdir -p ./app/Kassa.app || mkdir -p ./app/Kassa.app || true
    - xcrun simctl privacy booted grant all $BOUNDLE_ID
  script:
    - xcodebuild -workspace ./project/Kassa2.0.xcworkspace -scheme Kassa2.0 build -allowProvisioningUpdates -destination "id=$IOS_ID_SIMULATOR"
    - find /Users/jira.bot.kasmain/Library/Developer/XCode/DerivedData -type d -name Kassa.app -exec cp -R "{}" ./app \;
    - xcrun simctl install booted ./app/Kassa.app
  after_script:
    - python3 telegram_bot/client.py -n install_job
  artifacts:
    when: always
    paths:
      - ./app/Kassa.app
    expire_in: 3 days
  cache:
    untracked: true
    key: cache
    paths:
      - ./project
    policy: pull
  rules:
    - if: '$WITHOUT_TESTS != "True"'

setup_job:
  stage: setup
  tags:
    - ios-host
  script:
    - python3 -m pip install wheel
    - python3 -m pip install Pillow
    - python3 -m pip install -r requirements.txt
  after_script:
    - python3 telegram_bot/client.py -n setup_job
  cache:
    untracked: true
    key: ${CI_JOB_NAME}
    paths:
      - "$CI_PROJECT_DIR/pip-cache"

pytest_job:
  stage: test
  tags:
    - ios-host
  before_script:
    - rm -r ./allure-results && mkdir ./allure-results || mkdir ./allure-results || true
  script:
    - python3 -m pytest -v -s -l --tb=short ./tests --alluredir=./allure-results --cov=./app --host
  after_script:
    - coverage xml
    - killall Appium || true
    - killall node || true
    - killall Simulator || true
    - echo $IOS_HOST_PASSWORD | sudo -S pkill redis-server || true
    - python3 telegram_bot/client.py -n test_job
  artifacts:
    when: always
    paths:
      - ./allure-results
    expire_in: 3 days
    reports:
      cobertura: coverage.xml
  allow_failure: true
  rules:
    - if: '$WITHOUT_TESTS != "True"'

history_job:
  stage: history
  tags:
    - ios-host
  before_script:
    - mkdir -p ./public/history || true
  script:
    - cp -r ./public/history ./allure-results/history || true
  after_script:
    - python3 telegram_bot/client.py -n history_job
  artifacts:
    when: always
    paths:
      - ./allure-results
    expire_in: 3 days
  cache:
    untracked: true
    key: cache
    paths:
      - ./allure-results
    policy: push

generate_job:
  stage: generate
  tags:
    - ios-host
  before_script:
    - rm -r ./allure-report && mkdir ./allure-report || mkdir ./allure-report || true
  script:
    - allure generate -c ./allure-results -o ./allure-report
  after_script:
    - python3 telegram_bot/client.py -n generate_job
    - ls ./allure-report/ # TODO: dbg
  artifacts:
    when: always
    paths:
      - ./allure-report
      - ./allure-results
    expire_in: 3 days
  cache:
    untracked: true
    key: cache
    paths:
      - ./allure-results
    policy: pull

docker_job:
  stage: generate
  trigger:
    include:
      - local: .docker-stage.yml

upload_job:
  stage: upload
  tags:
    - ios-host
  image: kochetkovma/allure-server:latest
  before_script:
    - rm -r ./allure-results.zip || true
  script:
    - zip -r allure-results.zip ./allure-results || true
    - |
      response=$(curl -X POST http://localhost:8080/api/result \
      -H  "Content-Type: multipart/form-data" \
      -F "allureResults=@allure-results.zip;type=application/x-zip-compressed")
    - python3 telegram_bot/client.py -r \"${response:41:36}\"
    - |
      curl --location --request POST "http://localhost:8080/api/report" \
      --header "Content-Type: application/json" \
      --data-raw "{\"reportSpec\": { \"path\": [ \"last\", \"${response:41:36}\" ], \"executorInfo\": { \"buildName\": \"${response:41:36}\" } }, \"results\": [ \"${response:41:36}\" ], \"deleteResults\": false}"
    - python3 jira_pipeline.py \"${response:41:36}\"
  after_script:
    - python3 telegram_bot/client.py -n upload_job
  cache:
    untracked: true
    key: cache
    paths:
      - ./allure-results
    policy: pull
  allow_failure: true
  rules:
    - if: '$WITHOUT_TESTS != "True"'

pages:
  stage: deploy
  tags:
    - ios-host
  before_script:
    - rm -r ./public && mkdir ./public || mkdir ./public || true
  script:
    - ls ./allure-report/ # TODO: dbg
    - mv ./allure-report/* ./public || true
  after_script:
    - python3 telegram_bot/client.py -n pages
  artifacts:
    when: always
    paths:
      - public
    expire_in: 10 days
